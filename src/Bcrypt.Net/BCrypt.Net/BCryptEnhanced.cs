/*
The MIT License (MIT)
Copyright (c) 2006 Damien Miller djm@mindrot.org (jBCrypt)
Copyright (c) 2013 Ryan D. Emerle (.Net port)
Copyright (c) 2016/2023 Chris McKee (.Net-core port / patches / new features)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
(the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
*/

using System;
using System.Security.Cryptography;

namespace BCryptNet;

/// <summary>
/// Legacy (Pre 3.5 SHA Hashing)
/// </summary>
[Obsolete("Users should be migrated to SHA or HMACSHA see commit #94f83db2fb4105e9acdfeede77e14477ef0c5fe7")]
public sealed class BCryptExtendedV1 : BCryptCore
{
    /// <summary>
    ///  Pre-hash a password with SHA384 then using the OpenBSD BCrypt scheme and a salt generated by <see cref="BCryptCore.GenerateSalt(int,char)"/>.
    /// </summary>
    /// <param name="inputKey">The password to hash.</param>
    /// <param name="workFactor"><seealso cref="BCryptCore.DefaultRounds"/></param>
    /// <param name="hashType">Configurable hash type for enhanced entropy</param>
    /// <returns>The hashed password.</returns>
    /// <exception cref="SaltParseException">Thrown when the salt could not be parsed.</exception>
    public new static string HashPassword(string inputKey, int workFactor = DefaultRounds,
        HashType hashType = DefaultEnhancedHashType) =>
        CreatePasswordHash(inputKey, GenerateSalt(workFactor), hashType,
            (s, type, version) => EnhancedHash(s, type, version));

    /// <summary>
    ///  Pre-hash a password with SHA384 then using the OpenBSD BCrypt scheme and a salt generated by <see cref="BCryptCore.GenerateSalt(int,char)"/>.
    /// </summary>
    /// <remarks>
    ///  You should generally leave generating salts to the library.
    /// </remarks>
    /// <param name="inputKey">The password to hash.</param>
    /// <param name="salt">Manually supplied salt</param>
    /// <param name="hashType">Configurable hash type for enhanced entropy</param>
    /// <returns>The hashed password.</returns>
    /// <exception cref="SaltParseException">Thrown when the salt could not be parsed.</exception>
    public new static string HashPassword(string inputKey, string salt, HashType hashType = DefaultEnhancedHashType) =>
        CreatePasswordHash(inputKey, salt, hashType, (s, type, version) => EnhancedHash(s, type, version));

    /// <summary>
    /// Hashes key, base64 encodes before returning byte array
    /// </summary>
    /// <param name="inputBytes"></param>
    /// <param name="bcryptMinorRevision">(Default: 'a')</param>
    /// <param name="hashType"><seealso cref="HashType"/>HashType used (default SHA384)</param>
    /// <returns></returns>
    private static byte[] EnhancedHash(string inputString, HashType hashType, char version = 'a')
    {
        switch (hashType)
        {
            case HashType.SHA384:
                return SHA384.Create()
                    .ComputeHash(SafeUTF8.GetBytes(inputString + (version >= 'a' ? Nul : EmptyString)));
            default:
                throw new ArgumentOutOfRangeException(nameof(hashType), hashType, null);
        }
    }

    public new static string ValidateAndUpgradeHash(string currentKey, string currentHash, string newKey,
        HashType hashType = DefaultEnhancedHashType,
        int workFactor = DefaultRounds, bool forceWorkFactor = false) =>
        throw new NotImplementedException("This method isn't supported in the legacy enhanced bcrypt class");
    

    /// <summary>
    ///  Verifies that the hash of the given <paramref name="text"/> matches the provided
    ///  <paramref name="hash"/>; the string will undergo SHA384 hashing to maintain the enhanced entropy work done during hashing
    /// </summary>
    /// <param name="text">The text to verify.</param>
    /// <param name="hash"> The previously-hashed password.</param>
    /// <param name="hashType"><seealso cref="HashType"/>HashType used (default SHA384)</param>
    /// <returns>true if the passwords match, false otherwise.</returns>
    public new static bool Verify(string text, string hash, HashType hashType = DefaultEnhancedHashType)
    {
        return SecureEquals(SafeUTF8.GetBytes(hash),
            SafeUTF8.GetBytes(CreatePasswordHash(text, hash, hashType,
                (s, type, version) => EnhancedHash(s, type, version))));
    }

    private const HashType DefaultEnhancedHashType = HashType.SHA384;
}

/// <summary>
/// BCrypt Enhanced (post v3.5)
/// Created to be compatible with other programming-language implementations of pre-hashed keys
/// i.e. passlib in python / php bcrypt and sha
/// </summary>
///  <para>
///         To hash a password using SHA384 pre-hashing for increased entropy see <see cref="BCryptExtendedV2.HashPassword"/>
///  </para>
///  <code>string pw_hash = BCryptExtendedV2.HashPassword(plain_password);
///        (To validate an enhanced hash you can pass true as the last parameter of Verify or use  <see cref="BCryptExtendedV2.Verify(string, string, HashType)"/>)
///  </code>
public sealed class BCryptExtendedV2 : BCryptCore
{
    private const HashType DefaultEnhancedHashType = HashType.SHA384;

    /// <summary>
    ///  Pre-hash a password with SHA384 then using the OpenBSD BCrypt scheme and a salt generated by <see cref="BCrypt.GenerateSalt(int,char)"/>.
    /// </summary>
    /// <param name="inputKey">The password to hash.</param>
    /// <param name="workFactor"></param>
    /// <param name="hashType"><seealso cref="HashType"/>HashType used (default SHA384)</param>
    /// <returns>The hashed password.</returns>
    /// <exception cref="SaltParseException">Thrown when the salt could not be parsed.</exception>
    public new static string HashPassword(string inputKey, int workFactor = DefaultRounds,
        HashType hashType = DefaultEnhancedHashType) =>
        CreatePasswordHash(inputKey, GenerateSalt(workFactor), hashType,
            (s, type, version) => EnhancedHash(s, type, version));
    
    /// <summary>
    ///  Pre-hash a password with SHA384 then using the OpenBSD BCrypt scheme with a manually supplied salt/>.
    /// </summary>
    ///         /// <remarks>
    ///  You should generally leave generating salts to the library.
    /// </remarks>
    /// <param name="inputKey">The password to hash.</param>
    /// <param name="workFactor"></param>
    /// <param name="hashType"><seealso cref="HashType"/>HashType used (default SHA384)</param>
    /// <returns>The hashed password.</returns>
    /// <exception cref="SaltParseException">Thrown when the salt could not be parsed.</exception>
    public new static string HashPassword(string inputKey, string salt, HashType hashType = DefaultEnhancedHashType) =>
        CreatePasswordHash(inputKey, salt, hashType, (s, type, version) => EnhancedHash(s, type, version));

    /// <summary>
    /// Hashes key, base64 encodes before returning byte array
    /// </summary>
    /// <param name="inputBytes"></param>
    /// <param name="bcryptMinorRevision">(Default: 'a')</param>
    /// <param name="hashType"><seealso cref="HashType"/>HashType used (default SHA384)</param>
    /// <returns></returns>
    private static byte[] EnhancedHash(string inputString, HashType hashType, char bcryptMinorRevision = 'a')
    {
        switch (hashType)
        {
            case HashType.SHA256:
                using (var sha = SHA256.Create())
                    return SafeUTF8.GetBytes(Convert.ToBase64String(sha.ComputeHash(SafeUTF8.GetBytes(inputString))) +
                                             (bcryptMinorRevision >= 'a' ? Nul : EmptyString));
            case HashType.SHA384:
                using (var sha = SHA384.Create())
                    return SafeUTF8.GetBytes(Convert.ToBase64String(sha.ComputeHash(SafeUTF8.GetBytes(inputString))) +
                                             (bcryptMinorRevision >= 'a' ? Nul : EmptyString));
            case HashType.SHA512:
                using (var sha = SHA512.Create())
                    return SafeUTF8.GetBytes(Convert.ToBase64String(sha.ComputeHash(SafeUTF8.GetBytes(inputString))) +
                                             (bcryptMinorRevision >= 'a' ? Nul : EmptyString));
            default:
                throw new ArgumentOutOfRangeException(nameof(hashType), hashType, null);
        }
    }

    /// <summary>
    /// Compares the users stored hash with their password
    /// in a time-safe manner
    /// </summary>
    /// <param name="inputBytes"></param>
    /// <param name="bcryptMinorRevision">(Default: 'a')</param>
    /// <param name="hashType"><seealso cref="HashType"/>HashType used (default SHA384)</param>
    /// <returns></returns>
    public new static bool Verify(string text, string hash, HashType hashType = DefaultEnhancedHashType)
    {
        return SecureEquals(SafeUTF8.GetBytes(hash),
            SafeUTF8.GetBytes(CreatePasswordHash(text, hash, hashType,
                (s, type, version) => EnhancedHash(s, type, version))));
    }

    public new static string ValidateAndUpgradeHash(string currentKey, string currentHash, string newKey,
        HashType hashType = DefaultEnhancedHashType,
        int workFactor = DefaultRounds, bool forceWorkFactor = false) =>
        ValidateAndUpgradeHash(currentKey, currentHash, DefaultEnhancedHashType, newKey, hashType, workFactor,
            forceWorkFactor);

    public static string ValidateAndUpgradeHash(string currentKey, string currentHash, HashType currentKeyHashType, 
        string newKey, HashType hashType = DefaultEnhancedHashType, 
        int workFactor = DefaultRounds, bool forceWorkFactor = false)
    {
        if (currentKey == null)
            throw new ArgumentNullException(nameof(currentKey));

        if (string.IsNullOrEmpty(currentHash) || currentHash.Length != 60)
            throw new ArgumentException("Invalid Hash", nameof(currentHash));

        // Throw if validation fails (password isn't valid for hash)
        if (!Verify(currentKey, currentHash, currentKeyHashType))
            throw new BcryptAuthenticationException("Current credentials could not be authenticated");

        // Throw if invalid BCrypt Version
        if (currentHash[0] != '$' || currentHash[1] != '2')
            throw new SaltParseException("Invalid bcrypt version");
        
        // Throw if log rounds are out of range on hash, deals with custom salts
        if (workFactor < 1 || workFactor > 31)
            throw new SaltParseException("Work factor out of range");
        
        // Determine the starting offset and validate the salt
        int startingOffset = 3;

        if (currentHash[2] != '$')
        {
            char minor = currentHash[2];
            if (minor != 'a' && minor != 'b' && minor != 'x' && minor != 'y' || currentHash[3] != '$')
            {
                throw new SaltParseException("Invalid bcrypt revision");
            }

            startingOffset = 4;
        }
        
        // Extract number of rounds
        if (currentHash[startingOffset + 2] > '$')
        {
            throw new SaltParseException("Missing work factor");
        }

        // Extract details from salt
        int currentWorkFactor = Convert.ToInt16(currentHash.Substring(startingOffset, 2));

        // Never downgrade work-factor (unless forced)
        if (!forceWorkFactor && currentWorkFactor > workFactor)
        {
            workFactor = currentWorkFactor;
        }

        return CreatePasswordHash(newKey, GenerateSalt(workFactor), hashType,
            (s, type, version) => EnhancedHash(s, type, version));
    }
}
