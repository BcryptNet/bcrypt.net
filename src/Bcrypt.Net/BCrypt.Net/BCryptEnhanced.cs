/*
The MIT License (MIT)
Copyright (c) 2006 Damien Miller djm@mindrot.org (jBCrypt)
Copyright (c) 2013 Ryan D. Emerle (.Net port)
Copyright (c) 2016/2022 Chris McKee (.Net-core port / patches / new features)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
(the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
*/

using System;
using System.Security.Cryptography;

namespace nBCrypt;

public sealed class ShaBCrypt : BCrypt
{
    /// <summary>
    ///  Pre-hash a password with SHA384 then using the OpenBSD BCrypt scheme and a salt generated by <see cref="BCrypt.GenerateSalt(int,char)"/>.
    /// </summary>
    /// <param name="inputKey">The password to hash.</param>
    /// <returns>The hashed password.</returns>
    /// <exception cref="SaltParseException">Thrown when the salt could not be parsed.</exception>
    public static string EnhancedHashPassword(string inputKey) => HashPassword(inputKey, GenerateSalt(), true);

    /// <summary>
    ///  Pre-hash a password with SHA384 then using the OpenBSD BCrypt scheme and a salt generated by <see cref="BCrypt.GenerateSalt(int,char)"/>.
    /// </summary>
    /// <param name="inputKey">The password to hash.</param>
    /// <param name="workFactor"></param>
    /// <returns>The hashed password.</returns>
    /// <exception cref="SaltParseException">Thrown when the salt could not be parsed.</exception>
    public static string EnhancedHashPassword(string inputKey, int workFactor) =>
        HashPassword(inputKey, GenerateSalt(workFactor), true);

    /// <summary>
    ///  Pre-hash a password with SHA384 then using the OpenBSD BCrypt scheme and a salt generated by <see cref="BCrypt.GenerateSalt(int,char)"/>.
    /// </summary>
    /// <param name="inputKey">The password to hash.</param>
    /// <param name="workFactor"></param>
    /// <param name="hashType">Configurable hash type for enhanced entropy</param>
    /// <returns>The hashed password.</returns>
    /// <exception cref="SaltParseException">Thrown when the salt could not be parsed.</exception>
    public static string EnhancedHashPassword(string inputKey, int workFactor, HashType hashType) =>
        HashPassword(inputKey, GenerateSalt(workFactor), true, hashType);


    /// <summary>
    ///  Pre-hash a password with SHA384 then using the OpenBSD BCrypt scheme and a salt generated by <see cref="BCrypt.GenerateSalt(int,char)"/>.
    /// </summary>
    /// <param name="inputKey">The password to hash.</param>
    /// <param name="workFactor">Defaults to 11</param>
    /// <param name="hashType">Configurable hash type for enhanced entropy</param>
    /// <returns>The hashed password.</returns>
    /// <exception cref="SaltParseException">Thrown when the salt could not be parsed.</exception>
    public static string EnhancedHashPassword(string inputKey, HashType hashType, int workFactor = DefaultRounds) =>
        HashPassword(inputKey, GenerateSalt(workFactor), true, hashType);


    /// <summary>
    /// Hashes key, base64 encodes before returning byte array
    /// </summary>
    /// <param name="inputBytes"></param>
    /// <param name="bcryptMinorRevision"></param>
    /// <param name="hashType"></param>
    /// <returns></returns>
    private static byte[] EnhancedHash(byte[] inputBytes, char bcryptMinorRevision, HashType hashType)
    {
        switch (hashType)
        {
            case HashType.SHA256:
                using (var sha = SHA256.Create())
                    inputBytes = SafeUTF8.GetBytes(Convert.ToBase64String(sha.ComputeHash(inputBytes)) +
                                                   (bcryptMinorRevision >= 'a' ? Nul : EmptyString));
                break;
            case HashType.SHA384:
                using (var sha = SHA384.Create())
                    inputBytes = SafeUTF8.GetBytes(Convert.ToBase64String(sha.ComputeHash(inputBytes)) +
                                                   (bcryptMinorRevision >= 'a' ? Nul : EmptyString));
                break;
            case HashType.SHA512:
                using (var sha = SHA512.Create())
                    inputBytes = SafeUTF8.GetBytes(Convert.ToBase64String(sha.ComputeHash(inputBytes)) +
                                                   (bcryptMinorRevision >= 'a' ? Nul : EmptyString));
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(hashType), hashType, null);
        }

        return inputBytes;
    }

    /// <summary>
    ///  Verifies that the hash of the given <paramref name="text"/> matches the provided
    ///  <paramref name="hash"/>; the string will undergo SHA384 hashing to maintain the enhanced entropy work done during hashing
    /// </summary>
    /// <param name="text">The text to verify.</param>
    /// <param name="hash"> The previously-hashed password.</param>
    /// <param name="hashType">HashType used (default SHA384)</param>
    /// <returns>true if the passwords match, false otherwise.</returns>
    public static bool EnhancedVerify(string text, string hash, HashType hashType = DefaultEnhancedHashType) =>
        Verify(text, hash, true, hashType);


}
